// Compile CSMain as a compute kernel.
#pragma kernel CSMain

#define WAVE_COUNT 8
#define PI 3.14159265359

uint inPointCount;
uint inWobblePointCount;

float inFlyProgress;
float inRippleMagnitude;
float inDeltaTime;

RWStructuredBuffer<float3> bezierPoints;
RWStructuredBuffer<float3> bezierIntPoints;

RWStructuredBuffer<float3> outPoints;

// float3 lerp helper function.
float3 Lerp(float3 a, float3 b, float t) 
{
	return a + ((b - a) * t);
}

float SqrDistance(float3 f3Start, float3 f3End) 
{
	float3 f3Diff = f3End - f3Start;

	return (f3Diff.x * f3Diff.x) + (f3Diff.y * f3Diff.y) + (f3Diff.z * f3Diff.z);
}

// float3 move towards helper function
float3 MoveTowards(float3 f3Start, float3 f3End, float fDistance) 
{
	if (SqrDistance(f3End, f3Start) < fDistance * fDistance)
	{
		return f3End;
	}

	return f3Start + (normalize(f3End - f3Start) * fDistance);
}

// Evaluate provided bezier curve.
float3 EvaluateCurve(RWStructuredBuffer<float3> points, uint threadIdx, uint startIndex, uint pointCount, float progress) 
{
	uint intPointIndex = threadIdx * pointCount;

	// Interpolate all line segments...
	bezierIntPoints[intPointIndex] = Lerp(points[startIndex], points[startIndex + 1], progress);
	
	for(uint i = 1; i < pointCount; ++i)
	{
		uint trueIndex = intPointIndex + i;

		bezierIntPoints[trueIndex] = Lerp(bezierIntPoints[trueIndex - 1], Lerp(points[(startIndex + i) - 1], points[startIndex + i], progress), progress);
	}

	return bezierIntPoints[intPointIndex + (pointCount - 1)];
}

[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// Get dimensions of output array.
	uint nOutPointCount = 0;
	uint nOutPointStride = 0;
	outPoints.GetDimensions(nOutPointCount, nOutPointStride);

	nOutPointCount /= 2;

	// Get point's point along the line.
	float fProgress = ((float)id.x / nOutPointCount) * inFlyProgress;

	// Rope wave
	float fWaveInput = pow((1.0f - fProgress), 2) * WAVE_COUNT * PI;
	float fCurveMag = sin(fWaveInput);
	float fCurveMagY = -cos(fWaveInput);

	// Directions
	float3 f3RopeDir = normalize(bezierPoints[0] - bezierPoints[inPointCount - 1]);
	float3 f3RippleDir = cross(f3RopeDir, float3(0.0f, 1.0f, 0.0f));

	float3 f3RippleVec = float3(0.0f, 0.0f, 0.0f);

	// --------------------------------------------------------------------------------------------------------------
	// Wobble vector outputs.

	outPoints[nOutPointCount + id.x] = MoveTowards(outPoints[nOutPointCount + id.x], EvaluateCurve(bezierPoints, id.x, inPointCount, inWobblePointCount, fProgress), inDeltaTime * 0.3f);

	float fPower = pow((1.0f - fProgress), 5);

	f3RippleVec = (f3RippleDir * fPower  * fCurveMag) + (float3(0.0f, 1.0f, 0.0f) * fPower * fCurveMagY); // Ripple vector

	// Multipliers
	f3RippleVec *= max((inRippleMagnitude - (pow(inFlyProgress, 5) * inRippleMagnitude)), 0.8f);
	f3RippleVec *= inRippleMagnitude;
	f3RippleVec *= fProgress / 0.1f;

	// --------------------------------------------------------------------------------------------------------------
	// Main point outputs.

	// Evaluate curve for output point.
	outPoints[id.x] = EvaluateCurve(bezierPoints, id.x, 0, inPointCount, fProgress) + outPoints[nOutPointCount + id.x] + f3RippleVec;
}
